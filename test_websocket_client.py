#!/usr/bin/env python3
"""
Simple WebSocket client to test product approval notifications
Usage: python3 test_websocket_client.py <JWT_TOKEN>
"""

import asyncio
import websockets
import json
import sys

async def test_websocket(token: str, base_url: str = "ws://localhost:8000"):
    """Connect to WebSocket and listen for events"""
    uri = f"{base_url}/ws/user?token={token}"
    
    print(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {uri}...")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket!")
            print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)\n")
            
            # Listen for messages
            async for message in websocket:
                data = json.loads(message)
                event_type = data.get('event')
                
                print(f"\n{'='*60}")
                print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
                print(f"{'='*60}")
                
                if event_type == 'connected':
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
                    print(f"   Client Type: {data.get('client_type')}")
                    print(f"   Client ID: {data.get('client_id')}")
                    print(f"   Timestamp: {data.get('timestamp')}")
                    
                elif event_type == 'product.approved':
                    product_data = data.get('data', {})
                    print(f"üéâ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –æ–¥–æ–±—Ä–µ–Ω!")
                    print(f"   ID —Ç–æ–≤–∞—Ä–∞: {product_data.get('product_id')}")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data.get('product_name')}")
                    print(f"   –ú–∞–≥–∞–∑–∏–Ω: {product_data.get('shop_name')} (ID: {product_data.get('shop_id')})")
                    print(f"   –°—Ç–∞—Ç—É—Å: {product_data.get('moderation_status')}")
                    if product_data.get('moderation_notes'):
                        print(f"   –ó–∞–º–µ—Ç–∫–∏: {product_data.get('moderation_notes')}")
                    print(f"   –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ: ${product_data.get('approval_fee', 0)}")
                    
                elif event_type == 'product.rejected':
                    product_data = data.get('data', {})
                    print(f"‚ùå –¢–æ–≤–∞—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                    print(f"   ID —Ç–æ–≤–∞—Ä–∞: {product_data.get('product_id')}")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data.get('product_name')}")
                    print(f"   –ú–∞–≥–∞–∑–∏–Ω: {product_data.get('shop_name')} (ID: {product_data.get('shop_id')})")
                    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {product_data.get('moderation_notes', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                    
                elif event_type == 'settings.updated':
                    settings_data = data.get('data', {})
                    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                    print(f"   –ö–ª—é—á: {settings_data.get('key')}")
                    print(f"   –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {settings_data.get('old_value')}")
                    print(f"   –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {settings_data.get('new_value')}")
                    
                else:
                    print(f"üì¶ –î—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ")
                    print(json.dumps(data, indent=2, ensure_ascii=False))
                
                print(f"{'='*60}\n")
                
    except websockets.exceptions.WebSocketException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
    except KeyboardInterrupt:
        print("\n\nüëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_websocket_client.py <JWT_TOKEN> [WS_URL]")
        print("–ü—Ä–∏–º–µ—Ä: python3 test_websocket_client.py eyJhbGc...")
        print("        python3 test_websocket_client.py eyJhbGc... ws://192.168.1.100:8000")
        sys.exit(1)
    
    token = sys.argv[1]
    base_url = sys.argv[2] if len(sys.argv) > 2 else "ws://localhost:8000"
    
    print("üöÄ WebSocket Test Client –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ–≤–∞—Ä–∞—Ö")
    print(f"üîó URL: {base_url}")
    print(f"üîë Token: {token[:20]}...\n")
    
    try:
        asyncio.run(test_websocket(token, base_url))
    except KeyboardInterrupt:
        print("\nüëã –ü–æ–∫–∞!")

if __name__ == "__main__":
    main()
