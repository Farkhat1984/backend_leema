name: CI/CD with UV

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Add UV to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -r requirements.txt

    - name: Run tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        SECRET_KEY: test-secret-key-for-ci
        GOOGLE_CLIENT_ID: test-client-id
        GOOGLE_CLIENT_SECRET: test-client-secret
        GEMINI_API_KEY: test-gemini-key
      run: |
        source .venv/bin/activate
        pytest tests/ -v --tb=short

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (Standard)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: fashion-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Docker image (Optimized)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.optimized
        push: false
        tags: fashion-backend:optimized
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm fashion-backend:latest python --version
        docker images fashion-backend:latest
        docker images fashion-backend:optimized
