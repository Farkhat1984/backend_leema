#!/bin/bash
# Production Setup Script for Fashion AI Platform
# This script prepares the server for production deployment

set -e  # Exit on error

echo "======================================"
echo "  Fashion AI - Production Setup"
echo "======================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo -e "${RED}Please run as root (sudo)${NC}"
    exit 1
fi

echo -e "${GREEN}✓${NC} Running as root"

# Check required commands
REQUIRED_COMMANDS="docker docker-compose nginx certbot python3"
for cmd in $REQUIRED_COMMANDS; do
    if ! command -v $cmd &> /dev/null; then
        echo -e "${RED}✗${NC} $cmd is not installed"
        echo "  Install it first and run this script again"
        exit 1
    fi
    echo -e "${GREEN}✓${NC} $cmd is installed"
done

# Get domain name
echo ""
echo "Enter your domain name (e.g., api.leema.kz):"
read DOMAIN

if [ -z "$DOMAIN" ]; then
    echo -e "${RED}Domain name is required${NC}"
    exit 1
fi

echo -e "${GREEN}✓${NC} Domain: $DOMAIN"

# Create necessary directories
echo ""
echo "Creating directories..."
mkdir -p /var/www/backend/uploads/{shops,users,generations,temp}
mkdir -p /opt/backups/{postgres,uploads}
mkdir -p /var/log/fashion-ai

chown -R www-data:www-data /var/www/backend/uploads
chmod -R 755 /var/www/backend/uploads

echo -e "${GREEN}✓${NC} Directories created"

# Generate secure credentials
echo ""
echo "Generating secure credentials..."

SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(64))")
DB_PASSWORD=$(python3 -c "import secrets, string; chars = string.ascii_letters + string.digits; print(''.join(secrets.choice(chars) for _ in range(32)))")

echo -e "${GREEN}✓${NC} Credentials generated"

# Check if .env exists
if [ -f /var/www/backend/.env ]; then
    echo ""
    echo -e "${YELLOW}⚠ .env file already exists${NC}"
    echo "Do you want to backup and create new? (y/N)"
    read BACKUP_ENV
    
    if [ "$BACKUP_ENV" = "y" ] || [ "$BACKUP_ENV" = "Y" ]; then
        cp /var/www/backend/.env /var/www/backend/.env.backup.$(date +%Y%m%d_%H%M%S)
        echo -e "${GREEN}✓${NC} Backup created"
    else
        echo "Keeping existing .env"
        exit 0
    fi
fi

# Create .env file
echo ""
echo "Creating .env file..."

cat > /var/www/backend/.env.production << EOF
# Generated by setup_production.sh on $(date)
# DO NOT COMMIT THIS FILE TO GIT!

# App Configuration
DEBUG=false
APP_NAME="Fashion AI Platform"
APP_VERSION="1.0.0"

# URLs
API_BASE_URL=https://$DOMAIN
FRONTEND_URL=https://www.leema.kz
WEBSOCKET_URL=wss://$DOMAIN

# Database (GENERATED - SAVE THIS!)
DATABASE_URL=postgresql+asyncpg://fashionuser:$DB_PASSWORD@postgres:5432/fashion_platform
POSTGRES_PASSWORD=$DB_PASSWORD

# Security (GENERATED - SAVE THIS!)
SECRET_KEY=$SECRET_KEY

# Redis
REDIS_URL=redis://redis:6379/0

# Google OAuth (FILL THESE IN!)
GOOGLE_CLIENT_ID=YOUR_GOOGLE_CLIENT_ID_HERE
GOOGLE_CLIENT_SECRET=YOUR_GOOGLE_CLIENT_SECRET_HERE
GOOGLE_REDIRECT_URI=https://www.leema.kz/public/auth/callback.html

# Firebase (FILL THESE IN!)
FIREBASE_WEB_API=YOUR_FIREBASE_WEB_API_KEY_HERE
GOOGLE_MOBILE_CLIENT_ID=YOUR_GOOGLE_MOBILE_CLIENT_ID_HERE

# Google Gemini AI (FILL THIS IN!)
GEMINI_API_KEY=YOUR_GEMINI_API_KEY_HERE

# PayPal (FILL THESE IN!)
PAYPAL_MODE=live
PAYPAL_CLIENT_ID=YOUR_PAYPAL_CLIENT_ID_HERE
PAYPAL_CLIENT_SECRET=YOUR_PAYPAL_CLIENT_SECRET_HERE

# Email (FILL THESE IN!)
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
EMAIL_FROM=your-email@gmail.com

# File Upload
UPLOAD_DIR=/app/uploads
MAX_FILE_SIZE_MB=10
UPLOAD_URL_PREFIX=https://$DOMAIN

# Limits
MAX_WARDROBE_ITEMS_PER_USER=500
EOF

echo -e "${GREEN}✓${NC} .env.production created"

# Create Nginx configuration
echo ""
echo "Creating Nginx configuration..."

cat > /etc/nginx/sites-available/$DOMAIN << 'EOF'
# Fashion AI Platform - API Server
# Generated by setup_production.sh

server {
    listen 80;
    server_name DOMAIN_PLACEHOLDER;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name DOMAIN_PLACEHOLDER;
    
    # SSL Configuration (will be added by certbot)
    # ssl_certificate /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/privkey.pem;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Logging
    access_log /var/log/nginx/api.leema.kz_access.log;
    error_log /var/log/nginx/api.leema.kz_error.log;
    
    # Increase upload size for images
    client_max_body_size 10M;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Proxy to FastAPI backend
    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # CORS headers (if needed)
        add_header Access-Control-Allow-Origin https://www.leema.kz always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Serve static uploads directory
    location /uploads/ {
        alias /var/www/backend/uploads/;
        expires 7d;
        add_header Cache-Control "public, immutable";
        
        # CORS for images
        add_header Access-Control-Allow-Origin * always;
    }
}
EOF

# Replace placeholder with actual domain
sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" /etc/nginx/sites-available/$DOMAIN

# Enable site
ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/

# Test Nginx configuration
nginx -t

echo -e "${GREEN}✓${NC} Nginx configuration created"

# Setup SSL with Let's Encrypt
echo ""
echo "Setting up SSL certificate with Let's Encrypt..."
echo "Do you want to obtain SSL certificate now? (Y/n)"
read SETUP_SSL

if [ "$SETUP_SSL" != "n" ] && [ "$SETUP_SSL" != "N" ]; then
    certbot --nginx -d $DOMAIN --non-interactive --agree-tos --register-unsafely-without-email || {
        echo -e "${YELLOW}⚠ SSL setup failed. You can run it manually later:${NC}"
        echo "  sudo certbot --nginx -d $DOMAIN"
    }
    echo -e "${GREEN}✓${NC} SSL certificate obtained"
else
    echo "Skipping SSL setup. Run manually later:"
    echo "  sudo certbot --nginx -d $DOMAIN"
fi

# Reload Nginx
systemctl reload nginx
echo -e "${GREEN}✓${NC} Nginx reloaded"

# Setup firewall
echo ""
echo "Configuring firewall..."
ufw --force enable
ufw allow 22/tcp comment 'SSH'
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'
ufw deny 8000/tcp comment 'Block direct backend access'
echo -e "${GREEN}✓${NC} Firewall configured"

# Create backup script
echo ""
echo "Creating backup script..."

cat > /opt/backup-fashion-ai.sh << 'EOF'
#!/bin/bash
# Automated backup script for Fashion AI Platform

BACKUP_DIR="/opt/backups"
DATE=$(date +%Y%m%d_%H%M%S)

# Backup database
echo "Backing up database..."
docker exec fashion_postgres_prod pg_dump -U fashionuser fashion_platform | gzip > "$BACKUP_DIR/postgres/db_$DATE.sql.gz"

# Backup uploads
echo "Backing up uploads..."
tar -czf "$BACKUP_DIR/uploads/uploads_$DATE.tar.gz" /var/www/backend/uploads

# Keep only last 30 days of database backups
find "$BACKUP_DIR/postgres" -name "*.sql.gz" -mtime +30 -delete

# Keep only last 7 days of uploads backups
find "$BACKUP_DIR/uploads" -name "*.tar.gz" -mtime +7 -delete

echo "Backup complete: $DATE"
EOF

chmod +x /opt/backup-fashion-ai.sh

# Add to crontab
(crontab -l 2>/dev/null; echo "0 2 * * * /opt/backup-fashion-ai.sh >> /var/log/fashion-ai/backup.log 2>&1") | crontab -

echo -e "${GREEN}✓${NC} Backup script created and scheduled (daily at 2 AM)"

# Summary
echo ""
echo "======================================"
echo "  Setup Complete!"
echo "======================================"
echo ""
echo -e "${GREEN}✓${NC} Nginx configured for $DOMAIN"
echo -e "${GREEN}✓${NC} SSL certificate setup"
echo -e "${GREEN}✓${NC} Firewall configured"
echo -e "${GREEN}✓${NC} Automated backups scheduled"
echo ""
echo -e "${YELLOW}IMPORTANT - Next Steps:${NC}"
echo ""
echo "1. Edit /var/www/backend/.env.production:"
echo "   - Add Google OAuth credentials"
echo "   - Add Firebase API keys"
echo "   - Add Gemini API key"
echo "   - Add PayPal credentials"
echo "   - Add email SMTP settings"
echo ""
echo "2. Copy to .env:"
echo "   cp /var/www/backend/.env.production /var/www/backend/.env"
echo ""
echo "3. Start Docker containers:"
echo "   cd /var/www/backend"
echo "   docker-compose -f docker-compose.prod.yml up -d"
echo ""
echo "4. Save these credentials (IMPORTANT!):"
echo "   SECRET_KEY: $SECRET_KEY"
echo "   DB_PASSWORD: $DB_PASSWORD"
echo ""
echo "5. Test the API:"
echo "   curl https://$DOMAIN/health"
echo ""
echo "======================================"
